#!/usr/bin/perl
use warnings;

# We use this as a simple bool, to dictate whether we use the
# pypi test url, or we are publishing live
my $test = 1;
my $repo_extra = "";

# Add the test repo url if we are in test most
if ($test == 1) {
	$repo_extra = "--repository-url https://test.pypi.org/legacy/";
}

my $base="v5"; # This is the base version, version5 in this case
my @tags = `git tag -l`;
my $version = "$base.0";
foreach (reverse(@tags)) {
	if (m/$base.*/) {
		s/\n//g;
		$version = $_;
		last;
	}
}
my @tmp;
@tmp = split(/$base\./, $version);
$tmp[1] = int($tmp[1]) + 1;
my $new_version = "$base.$tmp[1]";
print "Last tag is $version. Proposed new tag is $new_version. Proceed? (y/n): ";
my $answer = <STDIN>;
if ($answer =~ '(y|Y)') {
	print("OK, continuing\n");
} else {
	print("Aborting\n");
	exit(1);
}
sleep(1); # give user a moment to panic CTRL-C if needs be
# Write version into file for setup.py
die("Could not write version\n") unless (0 == system("echo $new_version > version"));
# Create the git tag
die("Could not create git tag\n") unless (0 == system("git tag -a $new_version -m \"Auto-Release Version $new_version\""));
# And we remove the build and dist folder, to make sure fresh files are used
system("rm -rf ./build ./dist");
# Now run the code to push to pip
die("Could not build and deploy to pypi\n") unless (0 == system("python ./setup.py sdist bdist_wheel && twine upload $repo_extra dist/*"));
# Finally, we push the tag to git
system("git push origin $new_version");
